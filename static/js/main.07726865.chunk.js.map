{"version":3,"sources":["components/Employees.js","App.js","serviceWorker.js","index.js"],"names":["Employees","state","search","employees","fn","React","createRef","fn_sort","ln","ln_sort","em","em_sort","ph","ph_sort","handleFilter","e","preventDefault","console","log","target","value","employees_orig","filter","employee","name","first","toLowerCase","startsWith","setState","handleSort","column","getAttribute","current","innerHTML","sort","e1","e2","localeCompare","last","email","phone","axios","get","then","res","data","results","this","employeesList","length","map","key","scope","src","picture","thumbnail","className","type","id","placeholder","onChange","onClick","ref","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.07726865.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from 'axios';\n\nclass Employees extends Component {\n\n    state = {\n        search: \"\",\n        employees: [],\n        fn: React.createRef(),\n        fn_sort: null,\n        ln: React.createRef(),\n        ln_sort: null,\n        em: React.createRef(),\n        em_sort: null,\n        ph: React.createRef(),\n        ph_sort: null\n    }\n\n    componentDidMount() {\n        axios.get('https://randomuser.me/api/?results=100')\n            .then(res => {\n                console.log(res.data.results);\n                this.setState({\n                    employees: res.data.results\n                })\n                this.state.employees_orig = res.data.results\n            })\n    }\n\n    handleFilter = (e) => {\n        e.preventDefault();\n        console.log(\"input\", e.target.value);\n        const employees = this.state.employees_orig.filter(employee => employee.name.first.toLowerCase().startsWith(e.target.value.toLowerCase()));\n        this.setState({ employees });\n    }\n\n    handleSort = (e) => {\n        e.preventDefault();\n        let column = e.target.getAttribute('column');\n        let employees = null\n        if (column == \"name.first\") {\n            switch (this.state.fn_sort) {\n                case null:   this.state.fn_sort = \"asc\";  break;\n                case \"asc\":  this.state.fn_sort = \"desc\"; break;\n                case \"desc\": this.state.fn_sort = \"asc\";  break;\n            }\n            this.state.fn.current.innerHTML = \"First Name (\" + this.state.fn_sort + \")\"\n            this.state.ln_sort = null\n            this.state.ln.current.innerHTML = \"Last Name\"\n            this.state.em_sort = null\n            this.state.em.current.innerHTML = \"Email\"\n            this.state.ph_sort = null\n            this.state.ph.current.innerHTML = \"Phone\"           \n            switch (this.state.fn_sort) {\n                case \"asc\":  \n                    employees = this.state.employees.sort(\n                        (e1, e2) => e1.name.first.localeCompare(e2.name.first)\n                    )\n                    break\n                case \"desc\": \n                    employees = this.state.employees.sort(\n                        (e1, e2) => e2.name.first.localeCompare(e1.name.first)\n                    )\n                    break\n            }\n        }\n        if (column == \"name.last\") {\n            switch (this.state.ln_sort) {\n                case null:   this.state.ln_sort = \"asc\";  break;\n                case \"asc\":  this.state.ln_sort = \"desc\"; break;\n                case \"desc\": this.state.ln_sort = \"asc\";  break;\n            }\n            this.state.fn_sort = null\n            this.state.fn.current.innerHTML = \"First Name\"\n            this.state.ln.current.innerHTML = \"Last Name (\" + this.state.ln_sort + \")\"\n            this.state.em_sort = null\n            this.state.em.current.innerHTML = \"Email\"\n            this.state.ph_sort = null\n            this.state.ph.current.innerHTML = \"Phone\"\n            switch (this.state.ln_sort) {\n                case \"asc\":  \n                    employees = this.state.employees.sort(\n                        (e1, e2) => e1.name.last.localeCompare(e2.name.last)\n                    )\n                    break\n                case \"desc\": \n                    employees = this.state.employees.sort(\n                        (e1, e2) => e2.name.last.localeCompare(e1.name.last)\n                    )\n                    break\n            }\n        }\n\n        if (column == \"email\") {\n            switch (this.state.em_sort) {\n                case null:   this.state.em_sort = \"asc\";  break;\n                case \"asc\":  this.state.em_sort = \"desc\"; break;\n                case \"desc\": this.state.em_sort = \"asc\";  break;\n            }\n            this.state.fn_sort = null\n            this.state.fn.current.innerHTML = \"First Name\"\n            this.state.ln_sort = null\n            this.state.ln.current.innerHTML = \"Last Name\"\n            this.state.em.current.innerHTML = \"Email (\" + this.state.em_sort + \")\"\n            this.state.ph_sort = null\n            this.state.ph.current.innerHTML = \"Phone\"\n            switch (this.state.em_sort) {\n                case \"asc\":  \n                    employees = this.state.employees.sort(\n                        (e1, e2) => e1.email.localeCompare(e2.email)\n                    )\n                    break\n                case \"desc\": \n                    employees = this.state.employees.sort(\n                        (e1, e2) => e2.email.localeCompare(e1.email)\n                    )\n                    break\n            }\n        }\n\n        if (column == \"phone\") {\n            switch (this.state.ph_sort) {\n                case null:   this.state.ph_sort = \"asc\";  break;\n                case \"asc\":  this.state.ph_sort = \"desc\"; break;\n                case \"desc\": this.state.ph_sort = \"asc\";  break;\n            }\n            this.state.fn_sort = null\n            this.state.fn.current.innerHTML = \"First Name\"\n            this.state.ln_sort = null\n            this.state.ln.current.innerHTML = \"Last Name\"\n            this.state.em_sort = null\n            this.state.em.current.innerHTML = \"Email\"\n            this.state.ph.current.innerHTML = \"Phone (\" + this.state.ph_sort + \")\"\n            switch (this.state.ph_sort) {\n                case \"asc\":  \n                    employees = this.state.employees.sort(\n                        (e1, e2) => e1.phone.localeCompare(e2.phone)\n                    )\n                    break\n                case \"desc\": \n                    employees = this.state.employees.sort(\n                        (e1, e2) => e2.phone.localeCompare(e1.phone)\n                    )\n                    break\n            }\n        }\n\n        this.setState({ employees });\n    }\n\n\n    render() {\n        const { employees } = this.state;\n\n        const employeesList = employees.length ? (\n            employees.map(employee => {\n                console.log(employee)\n                return (\n                    <tr key={employee.email}>\n                        <th scope=\"row\"><img src={employee.picture.thumbnail} /></th>\n                        <td>{employee.name.first}</td>\n                        <td>{employee.name.last}</td>\n                        <td>{employee.email}</td>\n                        <td>{employee.phone}</td>\n                    </tr>\n                )\n\n            })\n\n\n        ) : (\n\n                <tr><th scope=\"col\">No Employee Information Available at this time</th></tr>\n            )\n\n        console.log(\"employees: \", employeesList);\n\n        return (\n            <div>\n                    <form className=\"jumbotron form-group\">\n                        <center>\n                            <h1 className=\"display-4\">Employee Directory</h1>\n                            <hr className=\"my-4\"></hr>\n                            <input type=\"text\" className=\"form-control\" id=\"filterName\" placeholder=\"Filter By First Name\" onChange={this.handleFilter}></input>\n                            <br></br>\n                        </center>\n                    </form>\n\n\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">Image</th>\n                            <th onClick={this.handleSort} ref={this.state.fn} column= \"name.first\" scope=\"col\">First Name</th>\n                            <th onClick={this.handleSort} ref={this.state.ln} column= \"name.last\" scope=\"col\">Last Name</th>\n                            <th onClick={this.handleSort} ref={this.state.em} column= \"email\" scope=\"col\">Email</th>\n                            <th onClick={this.handleSort} ref={this.state.ph} column= \"phone\" scope=\"col\">Phone</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {employeesList}\n                    </tbody>\n                </table>\n\n            </div>\n        )\n    }\n}\n\nexport default Employees;\n","import React from 'react';\nimport Employees from './components/Employees'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Employees />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}